description = "H2O Python Package"

dependencies {
    compile project(path: ":h2o-assemblies:main", configuration: 'shadow')
}

def buildVersion = new H2OBuildVersion(rootDir, version)

ext {
    PROJECT_VERSION = buildVersion.getProjectVersion()
    pythonexe = findProperty("pythonExec") ?: "python"
    pipexe = findProperty("pipExec") ?: "pip"
    if (System.env.VIRTUAL_ENV) {
        pythonexe = "${System.env.VIRTUAL_ENV}/bin/python".toString()
        pipexe = "${System.env.VIRTUAL_ENV}/bin/pip".toString()
    }
    testsPath = file("tests")
}

task verifyDependencies(type: Exec) {
    commandLine getOsSpecificCommandLine([
            pythonexe, "scripts/verify_requirements.py",
            "--metayaml", "conda/h2o/meta.yaml",
            "--kind", "build"
    ])
}

task verifyTestDependencies(type: Exec) {
    commandLine getOsSpecificCommandLine([
            pythonexe, "scripts/verify_requirements.py",
            "--metayaml", "conda/h2o/meta.yaml",
            "--kind", "test"
    ])
}

task copyH2OJar(type: Copy, dependsOn: [configurations.compile]) {
    from configurations.compile.getSingleFile()
    rename { filename ->
        return 'h2o.jar'
    }
    into "${buildDir}/main/h2o/backend/bin/"
}

task copyH2OClientJar(type: Copy, dependsOn: [jar]) {
    from("${buildDir}/libs/h2o-py-${project.version}.jar") {
        rename("h2o-py-${project.version}.jar", "h2o.jar")
    }
    into "${buildDir}/client/h2o/backend/bin/"
}

task copySrcFiles(type: Copy, dependsOn: [copyH2OJar]) {
    from ("${projectDir}") {
        include "setup.py"
        include "setup.cfg"
        include "h2o/**"
        include "DESCRIPTION.rst"
        include "MANIFEST.in"
        include "README.md"
        include "requirements.txt"
    }
    into "${buildDir}/main"
}

task copyClientSrcFiles(type: Copy, dependsOn: [copyH2OClientJar]) {
    from ("${projectDir}") {
        include "setup.py"
        include "setup.cfg"
        include "h2o/**"
        include "DESCRIPTION.rst"
        include "MANIFEST.in"
        include "README.md"
        include "requirements.txt"
    }
    into "${buildDir}/client"
}

task buildDist(type: Exec, dependsOn: [verifyDependencies, copySrcFiles]) {
    doFirst {
        file([buildDir, "main", "h2o"].join(File.separator)).mkdirs()
        File version_file = file([buildDir, "main", "h2o", "version.txt"].join(File.separator))
        version_file.createNewFile()
        version_file.write(PROJECT_VERSION)
        File build_file = file([buildDir, "main", "h2o", "buildinfo.txt"].join(File.separator))
        build_file.createNewFile()
        build_file.write(buildVersion.toString())
    }
    workingDir new File(buildDir, "main")
    doFirst {
        file("${buildDir}/main/tmp").mkdirs()
        standardOutput = new FileOutputStream(file("${buildDir}/main/tmp/h2o-py_buildDist.out"))
    }
    commandLine getOsSpecificCommandLine([pythonexe, "setup.py", "bdist_wheel"])
}

task copyMainDist(type: Copy, dependsOn: [buildDist]) {
    from ("${buildDir}/main/") {
        include "dist/**"
    }
    into "${buildDir}"
}

task buildClientDist(type: Exec, dependsOn: [verifyDependencies, copyClientSrcFiles]) {
    doFirst {
        file([buildDir, "client", "h2o"].join(File.separator)).mkdirs()
        File version_file = file([buildDir, "client", "h2o", "version.txt"].join(File.separator))
        version_file.createNewFile()
        version_file.write(PROJECT_VERSION)
        File build_file = file([buildDir, "client", "h2o", "buildinfo.txt"].join(File.separator))
        build_file.createNewFile()
        build_file.write(buildVersion.toString())
    }
    workingDir new File(buildDir, "client")
    doFirst {
        file("${buildDir}/client/tmp").mkdirs()
        standardOutput = new FileOutputStream(file("${buildDir}/client/tmp/h2o-py_buildDist.out"))
    }
    commandLine getOsSpecificCommandLine([pythonexe, "setup.py", "bdist_wheel", "--client"])
}

task smokeTest(type: Exec, dependsOn: [verifyTestDependencies]) {
    workingDir testsPath
    List<String> args = [pythonexe, '../../scripts/run.py', '--wipeall', '--testsize', 's']
    if (project.hasProperty("jacocoCoverage")) {
        args << '--jacoco'
    }
    commandLine getOsSpecificCommandLine(args)
}

task pythonVersion(type: Exec) {
    doFirst {
        println(System.env.VIRTUAL_ENV)
        println(environment)
    }
    commandLine getOsSpecificCommandLine([pythonexe, "--version"])
}


task cleanUpSmokeTest(type: Delete) {
    delete file("${testsPath}/results")
}

task cleanCoverageData(type: Delete) {
    delete file("${testsPath}/results/jacoco")
}

task cleanBuild(type: Delete) {
    doFirst {
        println "Cleaning..."
    }
    delete file("build/")
    delete fileTree(dir: "$projectDir/h2o" , include: '**/*.pyc')
}

//
// Define the dependencies
//
clean.dependsOn cleanBuild, cleanUpSmokeTest, cleanCoverageData
buildDist.dependsOn buildClientDist // to have a predictable order of these 2 
build.dependsOn copyMainDist
